{
    "Readline items method": {
        "prefix": "read_line_items",
        "body": [
            "fn read_line_items<T>() -> Vec<T> where T: std::str::FromStr, T::Err: std::fmt::Debug, {let mut buffer = String::new();std::io::stdin().read_line(&mut buffer).ok();buffer.split_whitespace().map(|w| w.trim().parse::<T>().unwrap()).collect()}"
        ]
    },
    "Parse items": {
        "prefix": "parse_items",
        "body": [
            "input",
            ".split(${1: \" \"})",
            ".map(|w| w.trim().parse::<${2: T}>().unwrap())",
            ".collect()"
        ]
    },
    "Place a horizontal separator": {
        "prefix": "sep",
        "body": [
            "// ----------------------------------------------------------------------------"
        ]
    },
    "Place a segment line with a name": {
        "prefix": "segment",
        "body": [
            "// ----------------------------------------------------------------------------\n// ${name}:"
        ]
    },
    "Place a big segment line": {
        "prefix": "bigsegment",
        "body": [
            "// ============================================================================\n// ==== # ${name}:"
        ]
    },
    "Place a header": {
        "prefix": "header",
        "body": [
            "/******************************************************************************/",
            "/*        ${header}                                                           */",
            "/******************************************************************************/"
        ]
    },
    "Debug print": {
        "prefix": "deb",
        "body": [
            "println!(\"{:?}\", ${value});"
        ]
    },
    "print": {
        "prefix": "pri",
        "body": [
            "println!(\"${value}\");"
        ]
    },
    "new": {
        "prefix": "new",
        "body": [
            "fn new() -> Self {",
            "Self {}",
            "}"
        ]
    },
    "Cloneable handle to some state": {
        "prefix": "handle",
        "body": [
            "#[derive(Clone)]",
            "pub struct ${1:Handle}(std::sync::Arc<parking_lot::RwLock<${2:State}>>);",
            "",
            "impl ${1} {",
            "  fn read<F, T>(&self, read: F) -> T",
            "  where F: Fn(&${2}) -> T {",
            "    read(&self.0.read())",
            "  }",
            "",
            "  fn write<F, T>(&self, write: F) -> T",
            "  where F: Fn(&mut ${2}) -> T {",
            "    write(&mut self.0.write())",
            "  }",
            "} ",
            "",
            "struct ${2} {}"
        ],
        "description": "Cloneable handle to some state"
    },
    "Setup Criterion bench mark": {
        "prefix": "crit_setup",
        "body": [
            "fn criterion_benchmark(c: &mut Criterion) {",
            "c.bench_function(\"my bench\", |b| b.iter(|| ${1:my_function()}));",
            "}",
            "criterion_group!(benches, criterion_benchmark);",
            "criterion_main!(benches);"
        ]
    },
    "primitives": {
        "prefix": "primi",
        "body": [
            "usize, u64, u32, isize, i64, i32, f32"
        ]
    },
    "Macro with multiple arguments": {
        "prefix": "macro_array",
        "body": [
            "macro_rules! ${1:my_macro} {",
            "    ($($x:${2:Designator}), *) => {",
            "       $(",
            "         ${3}",
            "       )*",
            "    }",
            "}"
        ]
    },
    "Macro for all pairs inclusive": {
        "prefix": "macro_pairs_inclusive",
        "body": [
            "macro_rules! for_all_pairs_inclusive {",
            "(\\$mac:ident: \\$(\\$x:ident),*) => {",
            "for_all_pairs_inclusive!(@inner \\$mac: \\$(\\$x),*; \\$(\\$x),*);",
            "};",
            "(@inner \\$mac:ident: ; \\$(\\$x:ident),*) => {};",
            "(@inner \\$mac:ident: \\$head:ident \\$(,)? \\$(\\$tail:ident),*; \\$(\\$x:ident),*) => {",
            "\\$(",
            "\\$mac!(\\$head \\$x);",
            ")*",
            "for_all_pairs_inclusive!(@inner \\$mac: \\$(\\$tail),*; \\$(\\$x),*);",
            "};",
            "}",
            "",
            "macro_rules! ${1: for_pair} {",
            "(\\$a:ident \\$b:ident) => {",
            "${2}",
            "};",
            "}",
            "",
            "// E.g.: for_all_pairs_inclusive!(${1}: f32, u32, i32);",
            "for_all_pairs_inclusive!(${1}: ${3});"
        ]
    },
    "Macro for all pairs exclusive": {
        "prefix": "macro_pairs",
        "body": [
            "macro_rules! for_all_pairs {",
            "(\\$mac:ident: \\$head:ident \\$(,)? \\$(\\$tail:ident),*) => {",
            "for_all_pairs!(@inner \\$mac: \\$head,\\$(\\$tail),*; \\$(\\$tail),*; \\$head);",
            "};",
            "(@inner \\$mac:ident: ; \\$(\\$x:ident),* ; \\$y:ident) => {};",
            "(@inner \\$mac:ident: \\$h1:ident \\$(,)? \\$(\\$t1:ident),*; \\$h2:ident \\$(,)? \\$(\\$t2:ident),*; \\$store:ident) => {",
            "\\$mac!(\\$h1 \\$h2);",
            "\\$(",
            "\\$mac!(\\$h1 \\$t2);",
            ")*",
            "for_all_pairs!(@inner \\$mac: \\$(\\$t1),*; \\$(\\$t2),*,\\$store; \\$h2);",
            "};",
            "}",
            "",
            "macro_rules! ${1: for_pair} {",
            "(\\$a:ident \\$b:ident) => {",
            "${2}",
            "};",
            "}",
            "",
            "// E.g.: for_all_pairs!(${1}: f32, u32, i32);",
            "for_all_pairs!(${1}: ${3});"
        ]
    },
    "PartialEq max": {
        "prefix": "max",
        "body": [
            "#[rustfmt::skip] if ${1} >= ${2} { ${1} } else { ${2} }"
        ]
    },
    "PartialEq min": {
        "prefix": "min",
        "body": [
            "#[rustfmt::skip] if ${1} <= ${2} { ${1} } else { ${2} }"
        ]
    },
    "Skip format": {
        "prefix": "skip",
        "body": "#[rustfmt::skip]"
    },
    "AoC Template": {
        "prefix": "aoc",
        "body": [
            "fn part1(input: &str) -> usize {",
            "0",
            "}\n",
            "fn part2(input: &str) -> usize {",
            "0",
            "}\n",
            "fn main() {",
            "let input = include_str!(\"../in.txt\");",
            "println!(\"Part 1: {}\", part1(input));",
            "println!(\"Part 2: {}\", part2(input));",
            "}\n",
            "#[test]",
            "fn example1() {",
            "let input = include_str!(\"../ex1.txt\");",
            "assert_eq!(part1(input), 0);",
            "assert_eq!(part2(input), 0);",
            "}"
        ]
    },
    "Debug rect": {
        "prefix": "deb_rect",
        "body": [
            "ui.painter().debug_rect(${1:rect}, ${2:Color32::DEBUG_COLOR}, ${3:\"\"});"
        ]
    }
}
